{"id":"ejercicios/prototype.html","dependencies":[{"name":"/home/jeyfredc/Documentos/Cursos-platzi/Typescript-Comp-Js-Prof./package.json","includedInParent":true,"mtime":1607025349224}],"generated":{"html":"<html>\n    <head>\n        <title>prototype</title>\n    </head>\n\n    <body>\n        <a href=\"/ejercicios/\">Go Back</a>\n        <p><em>Abre la consola</em></p>\n\n        <script>// Un objeto común y corriente\n//const ironMan = {\n//    name : \"Iron Man\"\n//}\n//ironMan.saludar = function () {\n//    console.log(`Hola soy ${this.name}`)\n//}\n//ironMan.saludar();\n//// Otro objeto más\n//const gamora = {\n//    name : \"Gamora\"\n//}\n//gamora.saludar = function () {\n//    console.log(`Hola soy ${this.name}`)\n//}\n//gamora.saludar();\n// Seamos un poco más eficientes\n//function Hero (name) {\n//    const hero = {\n//        name : name\n//    }\n//    hero.saludar = function () {\n//        console.log(`Hola soy ${this.name}`)\n//    };\n//    return hero\n//}\n//const ironMan= Hero('Iron Man')\n//ironMan.saludar();\n//const gamora = Hero('Gamora')\n//gamora.saludar();\n// Aun podemos mejorar más y evitar tener que crear la misma funcion cada\n//const heroMethods = {                \n//    saludar : function () {\n//        console.log(`Me llamo ${this.name}`)\n//    },\n//};\n//function Hero (name) {\n//    const hero = {\n//        name : name\n//    };\n//hero.saludar = heroMethods.saludar;\n//return hero\n//}\n//const ironMan= Hero('Iron Man')\n//ironMan.saludar();\n//const gamora = Hero('Gamora')\n//gamora.saludar();\n// Object.create\n// const nuevoObjeto = Object.create(objeto)\n//const heroMethods = {                \n//    saludar : function () {\n//        console.log(`Soy superheroe! ${this.name}`)\n//    },\n//};\n//function Hero (name) {\n//    const hero = Object.create(heroMethods)\n//    hero.name = name;\n//return hero\n//}\n//const ironMan= Hero('Iron Man')\n//ironMan.saludar();\n//const gamora = Hero('Gamora')\n//gamora.saludar();\n// Los métodos de hero dentro de Hero\n//function Hero (name) {\n//    const hero = Object.create(Hero.prototype);\n//    hero.name = name;\n//return hero\n//}\n//Hero.prototype.saludar = function () {\n//    console.log(`Soy superpoderoso(a)! ${this.name}`);\n//}\n//const ironMan= Hero('Iron Man')\n//ironMan.saludar();\n//const gamora = Hero('Gamora')\n//gamora.saludar();\n// new es un atajo (azucar sintactica) para llevar Hero.protype al objeto\nfunction Hero(name) {\n  //const hero = Object.create(Hero.prototype);\n  this.name = name; //return this\n}\n\nHero.prototype.saludar = function () {\n  console.log(`New: ${this.name}`);\n};\n\nconst ironMan = new Hero('Iron Man');\nironMan.saludar();\nconst gamora = new Hero('Gamora');\ngamora.saludar();</script>\n    </body>\n</html>"},"sourceMaps":null,"error":null,"hash":"93c929bcd2f073fdecc51bef23587750","cacheData":{"env":{}}}