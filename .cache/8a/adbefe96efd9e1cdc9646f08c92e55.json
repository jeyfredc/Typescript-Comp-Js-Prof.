{"id":"ejercicios/generators.html","dependencies":[{"name":"/home/jeyfredc/Documentos/Cursos-platzi/Typescript-Comp-Js-Prof./package.json","includedInParent":true,"mtime":1607025349224}],"generated":{"html":"<html>\n  <head>\n    <title>Generators</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script>// Los generadores son funciones de las que se puede salir y volver a entrar\n// Su contexto (asociacion de variables) sera conservado entre las reentradas\n// Cada vez que llamamos next, la ejecución deñ generador va a continuar hasta el proximno yield\nfunction* simpleGenerator() {\n  console.log('GENERATOR START');\n  yield 1;\n  yield 2;\n  yield 3;\n  console.log('GENERATOR END');\n} //const gen = simpleGenerator()\n// Podemos hacer generadores infinitos\n\n\nfunction* idMaker() {\n  let id = 1;\n\n  while (true) {\n    yield id;\n    id = id + 1;\n  }\n} // Cuando llamamos next tambien podemos pasar valores que la funcion recibe\n\n\nfunction* idMakerReset() {\n  let id = 1;\n  let reset;\n\n  while (true) {\n    reset = yield id;\n\n    if (reset) {\n      id = 1;\n    } else {\n      id = id + 1;\n    }\n  }\n} // Ahora hagamos un ejemplo un poco mas complejo: la secuencia fibonacci\n\n\nfunction* fibonacci() {\n  let a = 1;\n  let b = 1;\n\n  while (true) {\n    const nextNumber = a + b;\n    a = b;\n    b = nextNumber;\n    yield nextNumber;\n  }\n}</script>\n  </body>\n</html>\n\n"},"sourceMaps":null,"error":null,"hash":"b57da9ea2fed6d2242abed0a0560a85c","cacheData":{"env":{}}}